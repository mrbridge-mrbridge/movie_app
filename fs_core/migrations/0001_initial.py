# Generated by Django 4.0.3 on 2022-03-14 23:45

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_name', models.CharField(max_length=50)),
                ('age_restriction', models.CharField(choices=[('all', 'All'), ('kid', 'Kid')], default='Kids', max_length=10)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('slug', models.SlugField()),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('file', models.FileField(upload_to='videos/')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('description', models.TextField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('movie_type', models.CharField(choices=[('series', 'Series'), ('single', 'Single')], max_length=50)),
                ('genre', models.CharField(choices=[('action', 'Action'), ('drama', 'Drama'), ('horror', 'Horror'), ('comedy', 'Comedy'), ('fiction', 'Fiction'), ('romance', 'Romance'), ('documentary', 'Documentary'), ('animation', 'Animation'), ('fantasy', 'Fantasy'), ('sports', 'Sports'), ('spirituality', 'Spirituality')], max_length=50)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='images/thumbnail/')),
                ('age_restriction', models.CharField(choices=[('all', 'All'), ('kid', 'Kid')], max_length=10)),
                ('slug', models.SlugField()),
                ('videos', models.ManyToManyField(to='fs_core.video')),
            ],
            options={
                'ordering': ('-date_added',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_locked', models.BooleanField(default=False)),
                ('date_of_birth', models.DateField(blank=True, default=None, null=True)),
                ('city', models.CharField(blank=True, default=None, max_length=250, null=True)),
                ('region', models.CharField(blank=True, default=None, max_length=200, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('profiles', models.ManyToManyField(blank=True, to='fs_core.profile')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
